#!/usr/bin/env fish

function print_help
    echo "Usage: stap app1 apps2 [-p your dotfiles forder path]"
    echo ""
    echo "Options:"
    echo "  -p, --path PATH     Path to your dotfiles directory (required once)"
    echo "  -h, --help          Show this help message and exit"
    echo ""
    echo "Examples:"
    echo "  stap -p ~/.dotfiles"
    echo "  stap base hyprland gtk kitty"
end

function print_apps
    \ls "$dots_path/apps"
end

if test (count $argv) -lt 1
    echo "Usage: stap [-p path_to_dotfiles] app1 app2 ..."
    exit
end

# Parse arguments
set -l i 1
while test $i -le (count $argv)
    set arg $argv[$i]

    if test $arg = "-p" || test $arg = "--path"\)
        set -l next_index (math $i + 1)
        if test $next_index -gt (count $argv)
            echo "Error: Missing argument for $arg"
            exit 1
        end

        set -U dots_path (realpath (string replace -r '^~' $HOME $argv[$next_index]))

        set -e argv[$i]
        set -e argv[$i]
        continue
    end

    if test $arg = "-h" || test $arg = "--help"
        print_help
        exit
    else if test $arg = "-l" || test $arg = "--list"
        print_apps
        exit
    end

    set i (math $i + 1)
end

if not set -q dots_path
    echo "No dotfiles path given, defaulting to ~/.dotfiles"
    set -U dots_path $HOME/.dotfiles
    exit
end

# Apply stow
for a in $argv
    if test $a = "base"
      stow -v --dotfiles --dir "$dots_path" --target ~ -S $a
    else
      stow -v --dotfiles --dir "$dots_path/apps" --target ~ -S $a
    end
end

